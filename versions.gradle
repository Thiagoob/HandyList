/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
versions.activity = "1.1.0"
versions.android_gradle_plugin = '4.2.0-alpha15'
versions.annotations = "1.0.0"
versions.apache_commons = "2.5"
versions.appcompat = "1.2.0"
versions.arch_core = "2.1.0"
versions.arch_lifecycle_reactivestreams = "1.1.1"
versions.atsl_core = "1.3.0"
versions.atsl_junit = "1.1.2"
versions.atsl_rules = "1.2.0"
versions.atsl_runner = "1.3.0"
versions.benchmark = "1.1.0-alpha01"
versions.card_view = "1.0.0"
versions.circle_image_view = "3.1.0"
versions.compose = "1.0.0-alpha05"
versions.constraint_layout = "2.0.2"
versions.core_ktx = "1.3.2"
versions.coroutines = "1.4.0-M1"
versions.dagger = "2.16"
versions.dagger_hilt = "2.28-alpha"
versions.dagger_hilt_androidx = "1.0.0-alpha02"
versions.datastore = "1.0.0-alpha02"
versions.dexmaker = "2.2.0"
versions.espresso = "3.3.0"
versions.fragment = "1.2.5"
versions.glide = "4.11.0"
versions.hamcrest = "1.3"
versions.junit = "4.13.1"
versions.junit_jupiter = "5.7.0"
versions.kotlin = "1.4.10"
versions.leakcanary = "2.4"
versions.lifecycle = "2.2.0"
versions.material = "1.2.1"
versions.material_dialogs = "3.3.0"
versions.mockito = "2.25.0"
versions.mockito_all = "1.10.19"
versions.mockito_android = "2.25.0"
versions.mockwebserver = "3.8.1"
versions.navigation = "2.3.1"
versions.okhttp = "4.9.0"
versions.okhttp_logging_interceptor = "3.9.0"
versions.paging = "3.0.0-alpha07"
versions.recyclerview = "1.2.0-alpha06"
versions.retrofit = "2.9.0"
versions.robolectric = "4.2"
versions.room = "2.3.0-alpha01"
versions.rx_android = "2.1.1"
versions.rxjava2 = "2.2.9"
versions.swiperefreshlayout = "1.1.0"
versions.timber = "4.7.1"
versions.transition = "1.3.0"
versions.truth = "1.0.1"
versions.work = "2.2.0"
ext.versions = versions

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.compile_sdk = 29
build_versions.target_sdk = 29
build_versions.build_tools = "30.0.2"
ext.build_versions = build_versions

def deps = [:]

def activity = [:]
activity.runtime = "androidx.activity:activity:$versions.activity"
activity.runtime_ktx = "androidx.activity:activity-ktx:$versions.activity"
deps.activity = activity

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

deps.annotations = "androidx.annotation:annotation:$versions.annotations"

deps.appcompat = "androidx.appcompat:appcompat:$versions.appcompat"

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:$versions.arch_core"
arch_core.testing = "androidx.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

deps.arch_lifecycle_reactivestreams = "androidx.lifecycle:lifecycle-reactivestreams:$versions.arch_lifecycle_reactivestreams"

def atsl = [:]
atsl.core = "androidx.test:core:$versions.atsl_core"
atsl.ext_junit = "androidx.test.ext:junit:$versions.atsl_junit"
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_rules"
deps.atsl = atsl

deps.benchmark = "androidx.benchmark:benchmark-junit4:$versions.benchmark"
deps.benchmark_gradle = "androidx.benchmark:benchmark-gradle-plugin:$versions.benchmark"

deps.card_view = "androidx.cardview:cardview:$versions.cardview"

deps.circle_image_view = "de.hdodenhof:circleimageview:$versions.circle_image_view"

def compose = [:]
compose.foundation = "androidx.compose.foundation:foundation:$versions.compose"
compose.material = "androidx.compose.material:material:$versions.compose"
compose.material_icons_core = "androidx.compose.material:material-icons-core:$versions.compose"
compose.material_icons_extended = "androidx.compose.material:material-icons-extended:$versions.compose"
compose.runtime_livedata = "androidx.compose.runtime:runtime-livedata:$versions.compose"
compose.runtime_rxjava2 = "androidx.compose.runtime:runtime-rxjava2:$versions.compose"
compose.ui = "androidx.compose.ui:ui:$versions.compose"
compose.ui_test = "androidx.ui:ui-test:$versions.compose"
compose.ui_tooling = "androidx.ui:ui-tooling:$versions.compose"
deps.compose = compose

deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"

deps.core_ktx = "androidx.core:core-ktx:$versions.core_ktx"

def coroutines = [:]
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
coroutines.core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
coroutines.test = "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
deps.coroutines = coroutines

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

def dagger_hilt = [:]
dagger_hilt.android_gradle_plugin = "com.google.dagger:hilt-android-gradle-plugin:$versions.dagger_hilt"
dagger_hilt.android = "com.google.dagger:hilt-android:$versions.dagger_hilt"
dagger_hilt.compiler = "com.google.dagger:hilt-android-compiler:$versions.dagger_hilt"
dagger_hilt.testing = "com.google.dagger:hilt-android-testing:$versions.dagger_hilt"

dagger_hilt.androidx = [:]
dagger_hilt.androidx.viewmodel = "androidx.hilt:hilt-lifecycle-viewmodel:$versions.dagger_hilt_androidx"
dagger_hilt.androidx.work_manager = "androidx.hilt:hilt-work:$versions.dagger_hilt_androidx"
dagger_hilt.androidx.compiler = "androidx.hilt:hilt-compiler:$versions.dagger_hilt_androidx"
deps.dagger_hilt = dagger_hilt

def datastore = [:]
datastore.preferences = "androidx.datastore:datastore-preferences:$versions.datastore"
datastore.proto = "androidx.datastore:datastore-core:$versions.datastore"
deps.datastore = datastore

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.idling_resources = "androidx.test.espresso:espresso-idling-resource:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
espresso.remote = "androidx.test.espresso:espresso-remote:$versions.espresso"
espresso.web = "androidx.test.espresso:espresso-web:$versions.espresso"
deps.espresso = espresso

def fragment = [:]
fragment.runtime = "androidx.fragment:fragment:$versions.fragment"
fragment.runtime_ktx = "androidx.fragment:fragment-ktx:$versions.fragment"
fragment.testing = "androidx.fragment:fragment-testing:$versions.fragment"
deps.fragment = fragment

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
glide.recyclerview_integration = "com.github.bumptech.glide:recyclerview-integration:$versions.glide"
deps.glide = glide

deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"

deps.junit = "junit:junit:$versions.junit"

def junit_jupiter = [:]
junit_jupiter.api = "org.junit.jupiter:junit-jupiter-api:$versions.junit_jupiter"
junit_jupiter.params = "org.junit.jupiter:junit-jupiter-params:$versions.junit_jupiter"
junit_jupiter.engine = "org.junit.jupiter:junit-jupiter-engine:$versions.junit_jupiter"
deps.junit_jupiter = junit_jupiter

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
deps.kotlin = kotlin

deps.leakcanary = "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"

def lifecycle = [:]
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.livedata = "androidx.lifecycle:lifecycle-livedata:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
lifecycle.reactivestreams = "androidx.lifecycle:lifecycle-reactivestreams-ktx:$versions.lifecycle"
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.runtime_ktx = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
lifecycle.viewmodel = "androidx.lifecycle:lifecycle-viewmodel:$versions.lifecycle"
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
lifecycle.viewmodel_savedstate = "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycle"
deps.lifecycle = lifecycle

deps.material = "com.google.android.material:material:$versions.material"

def material_dialogs = [:]
material_dialogs.bottomsheets = "com.afollestad.material-dialogs:bottomsheets:$versions.material_dialogs"
material_dialogs.color = "com.afollestad.material-dialogs:color:$versions.material_dialogs"
material_dialogs.core = "com.afollestad.material-dialogs:core:$versions.material_dialogs"
material_dialogs.datetime = "com.afollestad.material-dialogs:datetime:$versions.material_dialogs"
material_dialogs.files = "com.afollestad.material-dialogs:files:$versions.material_dialogs"
material_dialogs.input = "com.afollestad.material-dialogs:input:$versions.material_dialogs"
material_dialogs.lifecycle = "com.afollestad.material-dialogs:lifecycle:$versions.material_dialogs"
deps.material_dialogs = material_dialogs

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.testing = "androidx.navigation:navigation-testing:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

def okhttp = [:]
okhttp.logging_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp_logging_interceptor"
okhttp.runtime = "com.squareup.okhttp3:okhttp:$versions.okhttp"
deps.okhttp = okhttp

def paging = [:]
paging.guava = "androidx.paging:paging-guava:$versions.paging"
paging.runtime = "androidx.paging:paging-runtime:$versions.paging"
paging.rxjava2 = "androidx.paging:paging-rxjava2:$versions.paging"
paging.testing = "androidx.paging:paging-common:$versions.paging"
deps.paging = paging

def recyclerview = [:]
recyclerview.runtime = "androidx.recyclerview:recyclerview:$versions.recyclerview"
recyclerview.selection = "androidx.recyclerview:recyclerview-selection:$versions.recyclerview"
deps.recyclerview = recyclerview

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
retrofit.rxjava2_adapter = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
deps.retrofit = retrofit

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

def room = [:]
room.compiler = "androidx.room:room-compiler:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
room.runtime = "androidx.room:room-runtime:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"

deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"

deps.swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"

deps.timber = "com.jakewharton.timber:timber:$versions.timber"

deps.transition = "androidx.transition:transition:$versions.transition"

deps.truth = "com.google.truth:truth:$versions.truth"

def work = [:]
work.firebase = "androidx.work:work-firebase:$versions.work"
work.gcm = "androidx.work:work-gcm:$versions.work"
work.runtime = "androidx.work:work-runtime:$versions.work"
work.runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
work.rxjava2 = "androidx.work:work-rxjava2:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
deps.work = work

ext.deps = deps

static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
}
ext.addRepos = this.&addRepos